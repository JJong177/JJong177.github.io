(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{523:function(e,t,o){"use strict";o.r(t);var v=o(6),r=Object(v.a)({},(function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[o("h2",{attrs:{id:"event-loop"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#event-loop"}},[e._v("#")]),e._v(" Event Loop")]),e._v(" "),o("p",[o("code",[e._v("概念:")]),e._v("JavaScript有一个主线程和调用栈（执行栈），所有任务都会被放到 调用栈 等 主线程 执行。")]),e._v(" "),o("p",[o("code",[e._v("JS调用栈:")]),e._v("采用后进先出的规则，当函数执行时，会添加到栈的顶部，当执行栈执行结束，就会从栈顶移出，直到栈内被清空。")]),e._v(" "),o("p",[o("code",[e._v("任务:")]),e._v("宏任务（MacroTask）、微任务（MicroTask）")]),e._v(" "),o("ul",[o("li",[e._v("宏任务：script中所有代码、setTimeout、setInterval、I/O、UI Rendering")]),e._v(" "),o("li",[e._v("微任务：Promise、Process.nextTick（Node独有）")])]),e._v(" "),o("p",[o("code",[e._v("JavaScript单线程:")]),e._v("分为"),o("code",[e._v("同步任务")]),e._v("和"),o("code",[e._v("异步任务")]),e._v("，同步任务会依照调用栈的顺序等待主线程依次执行，异步任务会等异步任务有了结果，将注册的回调函数放入任务队列中等待主线程空闲时进行调用（调用栈被清空），被读取到调用栈中等待主线程执行。")])])}),[],!1,null,null,null);t.default=r.exports}}]);